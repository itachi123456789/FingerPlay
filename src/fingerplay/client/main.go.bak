package main

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"time"

	log "code.google.com/p/log4go"
)

func main() {
	testJSON()
	newClient(10)
	newClient(10)
	newClient(10)

	newClient(100)
	newClient(100)
	newClient(100)

	newClient(1000)
	newClient(1000)
	newClient(1000)

	newClient(5000)
	newClient(5000)
	newClient(5000)

	time.Sleep(200 * time.Second)
}

type TestJSON struct {
	A string `json:"a-xx"`
}

func testJSON() {
	v, _ := json.Marshal(&TestJSON{A: "haha"})
	log.Debug("v: %s", v)
	t := &TestJSON{}
	json.Unmarshal(v, t)
	log.Debug("t: %#v", t)
}

func newClient(lv int) {
	go func() {
		request := &MatchOpponentRequest{}
		request.Level = lv

		response := &MatchOpponentResponse{}

		url := "http://0.0.0.0:30112/fingerplay/v1/match"
		if err := post(url, request, response); err != nil {
			log.Error("post(%q, %#v) failed: %s", url, request, err)
		}
		log.Debug("match opponent response: %#v", response)
	}()
}

func post(url string, arg interface{}, reply interface{}) (err error) {
	var (
		response *http.Response
		body     []byte
		buf      *bytes.Buffer
	)

	if arg != nil {
		if b, ok := arg.([]byte); !ok {
			if body, err = json.Marshal(arg); err != nil {
				return
			}
		} else {
			body = b
		}
	}

	buf = bytes.NewBuffer(body)

	if response, err = http.Post(url, "application/json;charset=utf-8", buf); err != nil {
		return
	}

	if response != nil {
		defer response.Body.Close()
	} else {
		return
	}

	if body, err = ioutil.ReadAll(response.Body); err != nil {
		return
	}

	return json.Unmarshal(body, reply)
}
